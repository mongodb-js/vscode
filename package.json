{
  "preview": false,
  "name": "mongodb-vscode",
  "displayName": "MongoDB for VS Code",
  "description": "Connect to MongoDB and Atlas directly from your VS Code environment, navigate your databases and collections, inspect your schema and use playgrounds to prototype queries and aggregations.",
  "version": "0.0.0-dev.0",
  "homepage": "https://github.com/mongodb-js/vscode",
  "qna": "https://developer.mongodb.com/community/forums/",
  "repository": {
    "type": "git",
    "url": "https://github.com/mongodb-js/vscode"
  },
  "bugs": {
    "url": "https://github.com/mongodb-js/vscode/issues",
    "email": "vscode@mongodb.com"
  },
  "publisher": "mongodb",
  "categories": [
    "AI",
    "Chat",
    "Data Science",
    "Programming Languages",
    "Snippets",
    "Other"
  ],
  "keywords": [
    "MongoDB",
    "MongoDB Atlas",
    "MQL",
    "Database",
    "Databases"
  ],
  "icon": "images/mongodb.png",
  "galleryBanner": {
    "color": "#3D4F58",
    "theme": "dark"
  },
  "license": "SEE LICENSE IN LICENSE.txt",
  "main": "./dist/extension.js",
  "scripts": {
    "clean": "rimraf ./out/* ./dist/* ",
    "lint": "eslint . && prettier --check .",
    "update-grammar": "ts-node ./scripts/update-grammar.ts",
    "precompile": "npm run clean",
    "compile": "npm-run-all compile:*",
    "compile:constants": "ts-node ./scripts/generate-constants.ts",
    "compile:resources": "npm run update-grammar",
    "compile:extension": "tsc -p ./",
    "compile:extension-bundles": "webpack --mode development",
    "watch": "npm run compile && npm-run-all -p watch:*",
    "watch:extension": "npm run compile:extension -- -watch",
    "watch:extension-bundles": "webpack --mode development --watch",
    "pretest": "npm run compile",
    "test": "npm run test-webview && npm run test-extension",
    "test-extension": "cross-env NODE_OPTIONS=--no-force-async-hooks-checks xvfb-maybe node ./out/test/runTest.js",
    "test-webview": "mocha -r ts-node/register --grep=\"${MOCHA_GREP}\" --file ./src/test/setup-webview.ts src/test/suite/views/webview-app/**/*.test.tsx",
    "ai-accuracy-tests": "env TS_NODE_FILES=true mocha -r ts-node/register --grep=\"${MOCHA_GREP}\" --file ./src/test/ai-accuracy-tests/test-setup.ts ./src/test/ai-accuracy-tests/ai-accuracy-tests.ts",
    "analyze-bundle": "webpack --mode production --analyze",
    "vscode:prepublish": "npm run clean && npm run compile:constants && npm run compile:resources && webpack --mode production",
    "check": "npm run lint && npm run depcheck",
    "depcheck": "depcheck",
    "package": "cross-env NODE_OPTIONS='--require ./scripts/no-npm-list-fail.js' vsce package --githubBranch main",
    "local-install": "npm run package && code --install-extension ./mongodb-vscode-*.vsix",
    "check-vsix-size": "ts-node ./scripts/check-vsix-size.ts",
    "release-draft": "node ./scripts/release-draft.js",
    "reformat": "prettier --write .",
    "snyk-test": "node scripts/snyk-test.js",
    "generate-icon-font": "ts-node ./scripts/generate-icon-font.ts",
    "generate-vulnerability-report": "mongodb-sbom-tools generate-vulnerability-report --snyk-reports=.sbom/snyk-test-result.json --dependencies=.sbom/dependencies.json --fail-on=high",
    "create-vulnerability-tickets": "mongodb-sbom-tools generate-vulnerability-report --snyk-reports=.sbom/snyk-test-result.json --dependencies=.sbom/dependencies.json --create-jira-issues",
    "prepare": "husky",
    "precommit": "ts-node ./scripts/precommit.ts"
  },
  "engines": {
    "vscode": "^1.94.2",
    "node": ">=20.9.0",
    "npm": ">=10.1.0"
  },
  "activationEvents": [
    "onView:mongoDB",
    "onChatParticipant:mongodb.participant",
    "onLanguage:json",
    "onLanguage:javascript",
    "onLanguage:plaintext",
    "onUri"
  ],
  "contributes": {
    "chatParticipants": [
      {
        "id": "mongodb.participant",
        "name": "MongoDB",
        "description": "Ask anything about MongoDB, from writing queries to questions about your cluster.",
        "isSticky": true,
        "commands": [
          {
            "name": "query",
            "isSticky": true,
            "description": "Ask how to write MongoDB queries or pipelines. For example, you can ask: \"Show me all the documents where the address contains the word street\"."
          },
          {
            "name": "docs",
            "isSticky": true,
            "description": "Ask MongoDB-related questions and find answers in the official documentation."
          },
          {
            "name": "schema",
            "isSticky": true,
            "description": "Analyze a collection's schema."
          }
        ],
        "disambiguation": [
          {
            "category": "mongodb",
            "description": "The user is asking for assistance or information related to MongoDB.",
            "examples": [
              "Explain this MongoDB query.",
              "How do I write this MongoDB query in Python?",
              "How do I use $lookup in MongoDB?",
              "Can you help me debug a MongoDB query?",
              "Rewrite this MongoDB query",
              "find all documents in my collection",
              "How to convert this MongoDB query to Python?",
              "How to convert this MongoDB query to Java?",
              "How to convert this MongoDB query to Node.js?",
              "How to convert this MongoDB query to Go?",
              "How to convert this MongoDB query to php?",
              "How to convert this MongoDB query to C#?",
              "How to convert this MongoDB query to Rust?",
              "How to convert this MongoDB query to Ruby?",
              "How do I update documents in MongoDB?",
              "How do I insert documents in MongoDB?",
              "How do I create documents in MongoDB?",
              "How do I delete documents in MongoDB?",
              "Explain how to use MongoDB transactions.",
              "How to model one-to-one relationships in MongoDB?",
              "How to model one-to-many relationships in MongoDB?",
              "Help me write this MongoDB query:",
              "Explain MongoDB query syntax.",
              "Help me write a MongoDB aggregation pipeline.",
              "Help me debug this aggregation pipeline.",
              "How do I use $lookup in a MongoDB aggregation pipeline?",
              "How do I optimize this MongoDB query?",
              "How do I optimize indexes in MongoDB?",
              "How do I optimize this data model in MongoDB?",
              "How do I create a compound index for this query?",
              "How do I model relationships in MongoDB?",
              "Review my MongoDB schema",
              "MongoDB best practices for indexing",
              "How do I use MongoDB Atlas search?",
              "How do I perform semantic search in MongoDB?",
              "How do I stream data using MongoDB?",
              "How do I monitor change streams in MongoDB?",
              "How do I set up a MongoDB replica set for local development?",
              "How do I add schema validation in MongoDB?",
              "How to version schema in MongoDB?"
            ]
          }
        ]
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "mongoDB",
          "title": "MongoDB",
          "icon": "images/sidebar-leaf.svg"
        }
      ]
    },
    "views": {
      "mongoDB": [
        {
          "id": "mongoDBConnectionExplorer",
          "name": "Connections",
          "when": "config.mdb.showMongoDBConnectionExplorer == true"
        },
        {
          "id": "mongoDBPlaygroundsExplorer",
          "name": "Playgrounds",
          "when": "config.mdb.showMongoDBPlaygrounds == true"
        },
        {
          "id": "mongoDBHelpExplorer",
          "name": "Help and Feedback",
          "when": "config.mdb.showMongoDBHelpExplorer == true"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "mongoDBConnectionExplorer",
        "contents": "No connections found.\n[Add Connection](command:mdb.connect)"
      },
      {
        "view": "mongoDBPlaygroundsExplorer",
        "contents": "No MongoDB playground files found in the workspace.\n[Create New Playground](command:mdb.createNewPlaygroundFromTreeView)"
      }
    ],
    "languages": [
      {
        "id": "terraform",
        "aliases": [
          "Terraform",
          "terraform"
        ],
        "extensions": [
          ".tf"
        ]
      }
    ],
    "grammars": [
      {
        "path": "./syntaxes/mongodbInjection.tmLanguage.json",
        "scopeName": "mongodb.injection",
        "injectTo": [
          "source.js"
        ]
      }
    ],
    "snippets": [
      {
        "language": "terraform",
        "path": "./snippets/atlas-terraform.json"
      }
    ],
    "commands": [
      {
        "command": "mdb.selectDatabaseWithParticipant",
        "title": "MongoDB: Select Database with Participant"
      },
      {
        "command": "mdb.selectCollectionWithParticipant",
        "title": "MongoDB: Select Collection with Participant"
      },
      {
        "command": "mdb.participantViewRawSchemaOutput",
        "title": "MongoDB: View Raw Schema JSON Output"
      },
      {
        "command": "mdb.connectWithParticipant",
        "title": "MongoDB: Change Active Connection with Participant"
      },
      {
        "command": "mdb.runParticipantCode",
        "title": "Run Content Generated by Participant"
      },
      {
        "command": "mdb.openParticipantCodeInPlayground",
        "title": "Open Generated by Participant Content In Playground"
      },
      {
        "command": "mdb.connect",
        "title": "MongoDB: Connect"
      },
      {
        "command": "mdb.connectWithURI",
        "title": "MongoDB: Connect with Connection String..."
      },
      {
        "command": "mdb.disconnect",
        "title": "MongoDB: Disconnect"
      },
      {
        "command": "mdb.removeConnection",
        "title": "MongoDB: Remove Connection..."
      },
      {
        "command": "mdb.openOverviewPage",
        "title": "MongoDB: Open Overview Page"
      },
      {
        "command": "mdb.openMongoDBIssueReporter",
        "title": "MongoDB: Open MongoDB Issue Reporter"
      },
      {
        "command": "mdb.openMongoDBShell",
        "title": "MongoDB: Launch MongoDB Shell"
      },
      {
        "command": "mdb.treeViewOpenMongoDBShell",
        "title": "Launch MongoDB Shell"
      },
      {
        "command": "mdb.createPlayground",
        "title": "MongoDB: Create MongoDB Playground"
      },
      {
        "command": "mdb.refreshPlaygroundsFromTreeView",
        "title": "Refresh",
        "icon": {
          "light": "images/light/refresh.svg",
          "dark": "images/dark/refresh.svg"
        }
      },
      {
        "command": "mdb.createNewPlaygroundFromOverviewPage",
        "title": "Create MongoDB Playground"
      },
      {
        "command": "mdb.createNewPlaygroundFromTreeView",
        "title": "Create MongoDB Playground",
        "icon": {
          "light": "images/light/add.svg",
          "dark": "images/dark/add.svg"
        }
      },
      {
        "command": "mdb.createNewPlaygroundFromTreeItem",
        "title": "Create MongoDB Playground",
        "icon": "$(mdb-playground)"
      },
      {
        "command": "mdb.changeActiveConnection",
        "title": "MongoDB: Change Active Connection"
      },
      {
        "command": "mdb.changeDriverSyntaxForExportToLanguage",
        "title": "MongoDB: Change Export To Language Driver Syntax"
      },
      {
        "command": "mdb.runSelectedPlaygroundBlocks",
        "title": "MongoDB: Run Selected Lines From Playground"
      },
      {
        "command": "mdb.saveMongoDBDocument",
        "title": "MongoDB: Save Document To MongoDB"
      },
      {
        "command": "mdb.runAllPlaygroundBlocks",
        "title": "MongoDB: Run All From Playground"
      },
      {
        "command": "mdb.runPlayground",
        "title": "MongoDB: Run All or Selection From Playground",
        "icon": {
          "light": "images/light/play.svg",
          "dark": "images/dark/play.svg"
        }
      },
      {
        "command": "mdb.selectTargetForExportToLanguage",
        "title": "MongoDB: Select Target For Export to Language",
        "icon": {
          "light": "images/light/export-to-language.svg",
          "dark": "images/dark/export-to-language.svg"
        }
      },
      {
        "command": "mdb.exportCodeToPlayground",
        "title": "Export Code to Playground"
      },
      {
        "command": "mdb.addConnection",
        "title": "Add MongoDB Connection",
        "icon": {
          "light": "images/light/add.svg",
          "dark": "images/dark/add.svg"
        }
      },
      {
        "command": "mdb.addConnectionWithURI",
        "title": "Add MongoDB Connection with Connection String...",
        "icon": {
          "light": "images/light/add.svg",
          "dark": "images/dark/add.svg"
        }
      },
      {
        "command": "mdb.copyConnectionString",
        "title": "Copy Connection String"
      },
      {
        "command": "mdb.editPresetConnections",
        "title": "Edit Preset Connections..."
      },
      {
        "command": "mdb.renameConnection",
        "title": "Rename Connection..."
      },
      {
        "command": "mdb.treeItemRemoveConnection",
        "title": "Remove Connection..."
      },
      {
        "command": "mdb.editConnection",
        "title": "Edit Connection..."
      },
      {
        "command": "mdb.addDatabase",
        "title": "Add Database...",
        "icon": "$(mdb-plus-circle)"
      },
      {
        "command": "mdb.searchForDocuments",
        "title": "Search For Documents...",
        "icon": {
          "light": "images/light/search-regular.svg",
          "dark": "images/dark/search-regular.svg"
        }
      },
      {
        "command": "mdb.openPlaygroundFromTreeView",
        "title": "Open Playground"
      },
      {
        "command": "mdb.connectToConnectionTreeItem",
        "title": "Connect"
      },
      {
        "command": "mdb.disconnectFromConnectionTreeItem",
        "title": "Disconnect"
      },
      {
        "command": "mdb.refreshConnection",
        "title": "Refresh"
      },
      {
        "command": "mdb.copyDatabaseName",
        "title": "Copy Database Name"
      },
      {
        "command": "mdb.dropDatabase",
        "title": "Drop Database..."
      },
      {
        "command": "mdb.refreshDatabase",
        "title": "Refresh"
      },
      {
        "command": "mdb.askCopilotFromTreeItem",
        "title": "Ask MongoDB Copilot",
        "icon": "$(copilot)"
      },
      {
        "command": "mdb.addCollection",
        "title": "Add Collection...",
        "icon": "$(mdb-plus-circle)"
      },
      {
        "command": "mdb.viewCollectionDocuments",
        "title": "View Documents"
      },
      {
        "command": "mdb.refreshDocumentList",
        "title": "Refresh",
        "icon": {
          "light": "images/light/refresh.svg",
          "dark": "images/dark/refresh.svg"
        }
      },
      {
        "command": "mdb.copyCollectionName",
        "title": "Copy Collection Name"
      },
      {
        "command": "mdb.dropCollection",
        "title": "Drop Collection..."
      },
      {
        "command": "mdb.refreshCollection",
        "title": "Refresh"
      },
      {
        "command": "mdb.insertDocumentFromTreeView",
        "title": "Insert Document..."
      },
      {
        "command": "mdb.refreshSchema",
        "title": "Refresh"
      },
      {
        "command": "mdb.copySchemaFieldName",
        "title": "Copy Field Name"
      },
      {
        "command": "mdb.refreshIndexes",
        "title": "Refresh"
      },
      {
        "command": "mdb.createIndexFromTreeView",
        "title": "Create New Index...",
        "icon": "$(mdb-plus-circle)"
      },
      {
        "command": "mdb.insertObjectIdToEditor",
        "title": "MongoDB: Insert ObjectId to Editor"
      },
      {
        "command": "mdb.generateObjectIdToClipboard",
        "title": "MongoDB: Generate ObjectId to Clipboard"
      },
      {
        "command": "mdb.openMongoDBDocumentFromTree",
        "title": "Open Document"
      },
      {
        "command": "mdb.copyDocumentContentsFromTreeView",
        "title": "Copy Document"
      },
      {
        "command": "mdb.cloneDocumentFromTreeView",
        "title": "Clone Document..."
      },
      {
        "command": "mdb.deleteDocumentFromTreeView",
        "title": "Delete Document..."
      },
      {
        "command": "mdb.addStreamProcessor",
        "title": "Add StreamProcessor...",
        "icon": "$(mdb-plus-circle)"
      },
      {
        "command": "mdb.startStreamProcessor",
        "title": "Start Stream Processor"
      },
      {
        "command": "mdb.stopStreamProcessor",
        "title": "Stop Stream Processor"
      },
      {
        "command": "mdb.dropStreamProcessor",
        "title": "Drop Stream Processor..."
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "mdb.createNewPlaygroundFromTreeView",
          "when": "view == mongoDBPlaygroundsExplorer",
          "group": "navigation@1"
        },
        {
          "command": "mdb.refreshPlaygroundsFromTreeView",
          "when": "view == mongoDBPlaygroundsExplorer",
          "group": "navigation@5"
        },
        {
          "command": "mdb.addConnection",
          "when": "view == mongoDBConnectionExplorer",
          "group": "navigation@1"
        },
        {
          "command": "mdb.addConnection",
          "when": "view == mongoDBConnectionExplorer",
          "group": "1@1"
        },
        {
          "command": "mdb.addConnectionWithURI",
          "when": "view == mongoDBConnectionExplorer",
          "group": "1@2"
        },
        {
          "command": "mdb.editPresetConnections",
          "when": "view == mongoDBConnectionExplorer",
          "group": "2@1"
        }
      ],
      "view/item/context": [
        {
          "command": "mdb.addDatabase",
          "when": "view == mongoDBConnectionExplorer && (viewItem == connectedConnectionTreeItem || viewItem == connectedPresetConnectionTreeItem) && mdb.isAtlasStreams == false",
          "group": "inline"
        },
        {
          "command": "mdb.addDatabase",
          "when": "view == mongoDBConnectionExplorer && (viewItem == connectedConnectionTreeItem || viewItem == connectedPresetConnectionTreeItem) && mdb.isAtlasStreams == false",
          "group": "1@1"
        },
        {
          "command": "mdb.addStreamProcessor",
          "when": "view == mongoDBConnectionExplorer && (viewItem == connectedConnectionTreeItem || viewItem == connectedPresetConnectionTreeItem) && mdb.isAtlasStreams == true",
          "group": "inline"
        },
        {
          "command": "mdb.addStreamProcessor",
          "when": "view == mongoDBConnectionExplorer && (viewItem == connectedConnectionTreeItem || viewItem == connectedPresetConnectionTreeItem) && mdb.isAtlasStreams == true",
          "group": "1@1"
        },
        {
          "command": "mdb.refreshConnection",
          "when": "view == mongoDBConnectionExplorer && (viewItem == connectedConnectionTreeItem || viewItem == connectedPresetConnectionTreeItem)",
          "group": "1@2"
        },
        {
          "command": "mdb.treeViewOpenMongoDBShell",
          "when": "view == mongoDBConnectionExplorer && (viewItem == connectedConnectionTreeItem || viewItem == connectedPresetConnectionTreeItem)",
          "group": "2@1"
        },
        {
          "command": "mdb.renameConnection",
          "when": "view == mongoDBConnectionExplorer && viewItem == connectedConnectionTreeItem",
          "group": "3@1"
        },
        {
          "command": "mdb.editConnection",
          "when": "view == mongoDBConnectionExplorer && viewItem == connectedConnectionTreeItem",
          "group": "3@2"
        },
        {
          "command": "mdb.editPresetConnections",
          "when": "view == mongoDBConnectionExplorer && viewItem == connectedPresetConnectionTreeItem",
          "group": "3@2"
        },
        {
          "command": "mdb.copyConnectionString",
          "when": "view == mongoDBConnectionExplorer && (viewItem == connectedConnectionTreeItem || viewItem == connectedPresetConnectionTreeItem)",
          "group": "4@1"
        },
        {
          "command": "mdb.disconnectFromConnectionTreeItem",
          "when": "view == mongoDBConnectionExplorer && (viewItem == connectedConnectionTreeItem || viewItem == connectedPresetConnectionTreeItem)",
          "group": "5@1"
        },
        {
          "command": "mdb.treeItemRemoveConnection",
          "when": "view == mongoDBConnectionExplorer && viewItem == connectedConnectionTreeItem",
          "group": "5@2"
        },
        {
          "command": "mdb.openPlaygroundFromTreeView",
          "when": "view == mongoDBPlaygroundsExplorer && viewItem == playgroundsTreeItem",
          "group": "1@1"
        },
        {
          "command": "mdb.connectToConnectionTreeItem",
          "when": "view == mongoDBConnectionExplorer && (viewItem == disconnectedConnectionTreeItem || viewItem == disconnectedPresetConnectionTreeItem)",
          "group": "1@1"
        },
        {
          "command": "mdb.renameConnection",
          "when": "view == mongoDBConnectionExplorer && viewItem == disconnectedConnectionTreeItem",
          "group": "2@1"
        },
        {
          "command": "mdb.editConnection",
          "when": "view == mongoDBConnectionExplorer && viewItem == disconnectedConnectionTreeItem",
          "group": "2@2"
        },
        {
          "command": "mdb.editPresetConnections",
          "when": "view == mongoDBConnectionExplorer && viewItem == disconnectedPresetConnectionTreeItem",
          "group": "2@2"
        },
        {
          "command": "mdb.copyConnectionString",
          "when": "view == mongoDBConnectionExplorer && (viewItem == disconnectedConnectionTreeItem || viewItem == disconnectedPresetConnectionTreeItem)",
          "group": "3@1"
        },
        {
          "command": "mdb.treeItemRemoveConnection",
          "when": "view == mongoDBConnectionExplorer && viewItem == disconnectedConnectionTreeItem",
          "group": "4@1"
        },
        {
          "command": "mdb.addCollection",
          "when": "view == mongoDBConnectionExplorer && viewItem == databaseTreeItem",
          "group": "inline@3"
        },
        {
          "command": "mdb.addCollection",
          "when": "view == mongoDBConnectionExplorer && viewItem == databaseTreeItem",
          "group": "1@1"
        },
        {
          "command": "mdb.refreshDatabase",
          "when": "view == mongoDBConnectionExplorer && viewItem == databaseTreeItem",
          "group": "1@2"
        },
        {
          "command": "mdb.copyDatabaseName",
          "when": "view == mongoDBConnectionExplorer && viewItem == databaseTreeItem",
          "group": "2@1"
        },
        {
          "command": "mdb.askCopilotFromTreeItem",
          "when": "mdb.isCopilotActive == true && view == mongoDBConnectionExplorer && (viewItem == databaseTreeItem || viewItem == collectionTreeItem)",
          "group": "inline@1"
        },
        {
          "command": "mdb.askCopilotFromTreeItem",
          "when": "mdb.isCopilotActive == true && view == mongoDBConnectionExplorer && (viewItem == databaseTreeItem || viewItem == collectionTreeItem)",
          "group": "3@1"
        },
        {
          "command": "mdb.createNewPlaygroundFromTreeItem",
          "when": "view == mongoDBConnectionExplorer && (viewItem == databaseTreeItem || viewItem == collectionTreeItem)",
          "group": "inline@2"
        },
        {
          "command": "mdb.createNewPlaygroundFromTreeItem",
          "when": "view == mongoDBConnectionExplorer && (viewItem == databaseTreeItem || viewItem == collectionTreeItem)",
          "group": "3@2"
        },
        {
          "command": "mdb.dropDatabase",
          "when": "view == mongoDBConnectionExplorer && viewItem == databaseTreeItem",
          "group": "4@1"
        },
        {
          "command": "mdb.viewCollectionDocuments",
          "when": "view == mongoDBConnectionExplorer && viewItem == collectionTreeItem",
          "group": "1@1"
        },
        {
          "command": "mdb.refreshCollection",
          "when": "view == mongoDBConnectionExplorer && viewItem == collectionTreeItem",
          "group": "1@2"
        },
        {
          "command": "mdb.copyCollectionName",
          "when": "view == mongoDBConnectionExplorer && viewItem == collectionTreeItem",
          "group": "2@1"
        },
        {
          "command": "mdb.insertDocumentFromTreeView",
          "when": "view == mongoDBConnectionExplorer && viewItem == collectionTreeItem",
          "group": "3@1"
        },
        {
          "command": "mdb.dropCollection",
          "when": "view == mongoDBConnectionExplorer && viewItem == collectionTreeItem",
          "group": "4@1"
        },
        {
          "command": "mdb.searchForDocuments",
          "when": "view == mongoDBConnectionExplorer && viewItem == documentListTreeItem",
          "group": "inline"
        },
        {
          "command": "mdb.refreshDocumentList",
          "when": "view == mongoDBConnectionExplorer && viewItem == documentListTreeItem",
          "group": "inline"
        },
        {
          "command": "mdb.viewCollectionDocuments",
          "when": "view == mongoDBConnectionExplorer && viewItem == documentListTreeItem",
          "group": "1@1"
        },
        {
          "command": "mdb.refreshDocumentList",
          "when": "view == mongoDBConnectionExplorer && viewItem == documentListTreeItem",
          "group": "1@2"
        },
        {
          "command": "mdb.searchForDocuments",
          "when": "view == mongoDBConnectionExplorer && viewItem == documentListTreeItem",
          "group": "2@1"
        },
        {
          "command": "mdb.insertDocumentFromTreeView",
          "when": "view == mongoDBConnectionExplorer && viewItem == documentListTreeItem",
          "group": "3@1"
        },
        {
          "command": "mdb.refreshSchema",
          "when": "view == mongoDBConnectionExplorer && viewItem == schemaTreeItem"
        },
        {
          "command": "mdb.copySchemaFieldName",
          "when": "view == mongoDBConnectionExplorer && viewItem == fieldTreeItem"
        },
        {
          "command": "mdb.createIndexFromTreeView",
          "when": "view == mongoDBConnectionExplorer && viewItem == indexListTreeItem",
          "group": "inline"
        },
        {
          "command": "mdb.refreshIndexes",
          "when": "view == mongoDBConnectionExplorer && viewItem == indexListTreeItem"
        },
        {
          "command": "mdb.createIndexFromTreeView",
          "when": "view == mongoDBConnectionExplorer && viewItem == indexListTreeItem"
        },
        {
          "command": "mdb.openMongoDBDocumentFromTree",
          "when": "view == mongoDBConnectionExplorer && viewItem == documentTreeItem",
          "group": "1@1"
        },
        {
          "command": "mdb.copyDocumentContentsFromTreeView",
          "when": "view == mongoDBConnectionExplorer && viewItem == documentTreeItem",
          "group": "2@1"
        },
        {
          "command": "mdb.cloneDocumentFromTreeView",
          "when": "view == mongoDBConnectionExplorer && viewItem == documentTreeItem",
          "group": "2@2"
        },
        {
          "command": "mdb.deleteDocumentFromTreeView",
          "when": "view == mongoDBConnectionExplorer && viewItem == documentTreeItem",
          "group": "3@1"
        },
        {
          "command": "mdb.startStreamProcessor",
          "when": "view == mongoDBConnectionExplorer && viewItem == streamProcessorTreeItem",
          "group": "6@1"
        },
        {
          "command": "mdb.stopStreamProcessor",
          "when": "view == mongoDBConnectionExplorer && viewItem == streamProcessorTreeItem",
          "group": "6@2"
        },
        {
          "command": "mdb.dropStreamProcessor",
          "when": "view == mongoDBConnectionExplorer && viewItem == streamProcessorTreeItem",
          "group": "6@3"
        }
      ],
      "editor/title": [
        {
          "command": "mdb.selectTargetForExportToLanguage",
          "group": "navigation@1",
          "when": "mdb.isPlayground == true && mdb.isCopilotActive == true"
        },
        {
          "command": "mdb.runPlayground",
          "group": "navigation@2",
          "when": "mdb.isPlayground == true"
        }
      ],
      "mdb.copilot": [
        {
          "command": "mdb.exportCodeToPlayground",
          "when": "mdb.isPlayground == false && mdb.isCopilotActive == true"
        }
      ],
      "editor/context": [
        {
          "submenu": "mdb.copilot",
          "group": "1_main@2"
        }
      ],
      "commandPalette": [
        {
          "command": "mdb.selectDatabaseWithParticipant",
          "when": "false"
        },
        {
          "command": "mdb.selectCollectionWithParticipant",
          "when": "false"
        },
        {
          "command": "mdb.participantViewRawSchemaOutput",
          "when": "false"
        },
        {
          "command": "mdb.connectWithParticipant",
          "when": "false"
        },
        {
          "command": "mdb.runParticipantCode",
          "when": "false"
        },
        {
          "command": "mdb.openParticipantCodeInPlayground",
          "when": "false"
        },
        {
          "command": "mdb.runParticipantCode",
          "when": "false"
        },
        {
          "command": "mdb.disconnect",
          "when": "mdb.connectedToMongoDB == true"
        },
        {
          "command": "mdb.saveMongoDBDocument",
          "when": "resourceScheme == VIEW_DOCUMENT_SCHEME"
        },
        {
          "command": "mdb.runSelectedPlaygroundBlocks",
          "when": "mdb.isPlayground == true"
        },
        {
          "command": "mdb.runAllPlaygroundBlocks",
          "when": "mdb.isPlayground == true"
        },
        {
          "command": "mdb.refreshPlaygroundsFromTreeView",
          "when": "false"
        },
        {
          "command": "mdb.searchForDocuments",
          "when": "false"
        },
        {
          "command": "mdb.addConnection",
          "when": "false"
        },
        {
          "command": "mdb.addConnectionWithURI",
          "when": "false"
        },
        {
          "command": "mdb.createNewPlaygroundFromOverviewPage",
          "when": "false"
        },
        {
          "command": "mdb.openMongoDBIssueReporter",
          "when": "true"
        },
        {
          "command": "mdb.createNewPlaygroundFromTreeView",
          "when": "false"
        },
        {
          "command": "mdb.changeActiveConnection",
          "when": "mdb.isPlayground"
        },
        {
          "command": "mdb.changeDriverSyntaxForExportToLanguage",
          "when": "false"
        },
        {
          "command": "mdb.copyConnectionString",
          "when": "false"
        },
        {
          "command": "mdb.renameConnection",
          "when": "false"
        },
        {
          "command": "mdb.editConnection",
          "when": "false"
        },
        {
          "command": "mdb.treeItemRemoveConnection",
          "when": "false"
        },
        {
          "command": "mdb.addDatabase",
          "when": "false"
        },
        {
          "command": "mdb.openPlaygroundFromTreeView",
          "when": "false"
        },
        {
          "command": "mdb.connectToConnectionTreeItem",
          "when": "false"
        },
        {
          "command": "mdb.treeViewOpenMongoDBShell",
          "when": "false"
        },
        {
          "command": "mdb.disconnectFromConnectionTreeItem",
          "when": "false"
        },
        {
          "command": "mdb.refreshConnection",
          "when": "false"
        },
        {
          "command": "mdb.copyDatabaseName",
          "when": "false"
        },
        {
          "command": "mdb.dropDatabase",
          "when": "false"
        },
        {
          "command": "mdb.refreshDatabase",
          "when": "false"
        },
        {
          "command": "mdb.addCollection",
          "when": "false"
        },
        {
          "command": "mdb.viewCollectionDocuments",
          "when": "false"
        },
        {
          "command": "mdb.refreshDocumentList",
          "when": "false"
        },
        {
          "command": "mdb.insertDocumentFromTreeView",
          "when": "false"
        },
        {
          "command": "mdb.copyCollectionName",
          "when": "false"
        },
        {
          "command": "mdb.dropCollection",
          "when": "false"
        },
        {
          "command": "mdb.refreshCollection",
          "when": "false"
        },
        {
          "command": "mdb.refreshSchema",
          "when": "false"
        },
        {
          "command": "mdb.runPlayground",
          "when": "false"
        },
        {
          "command": "mdb.selectTargetForExportToLanguage",
          "when": "false"
        },
        {
          "command": "mdb.exportCodeToPlayground",
          "when": "false"
        },
        {
          "command": "mdb.createIndexFromTreeView",
          "when": "false"
        },
        {
          "command": "mdb.refreshIndexes",
          "when": "false"
        },
        {
          "command": "mdb.copySchemaFieldName",
          "when": "false"
        },
        {
          "command": "mdb.openMongoDBDocumentFromTree",
          "when": "false"
        },
        {
          "command": "mdb.copyDocumentContentsFromTreeView",
          "when": "false"
        },
        {
          "command": "mdb.cloneDocumentFromTreeView",
          "when": "false"
        },
        {
          "command": "mdb.deleteDocumentFromTreeView",
          "when": "false"
        },
        {
          "command": "mdb.addStreamProcessor",
          "when": "false"
        },
        {
          "command": "mdb.startStreamProcessor",
          "when": "false"
        },
        {
          "command": "mdb.stopStreamProcessor",
          "when": "false"
        },
        {
          "command": "mdb.dropStreamProcessor",
          "when": "false"
        }
      ]
    },
    "submenus": [
      {
        "id": "mdb.copilot",
        "label": "MongoDB Copilot Extension"
      }
    ],
    "keybindings": [
      {
        "command": "mdb.runSelectedPlaygroundBlocks",
        "key": "ctrl+alt+s",
        "mac": "cmd+alt+s",
        "when": "mdb.isPlayground == true"
      },
      {
        "command": "mdb.runAllPlaygroundBlocks",
        "key": "ctrl+alt+r",
        "mac": "cmd+alt+r",
        "when": "mdb.isPlayground == true"
      },
      {
        "command": "mdb.saveMongoDBDocument",
        "key": "ctrl+s",
        "mac": "cmd+s",
        "when": "resourceScheme == VIEW_DOCUMENT_SCHEME"
      }
    ],
    "capabilities": {
      "codeLensProvider": {
        "resolveProvider": "true"
      }
    },
    "configuration": {
      "title": "MongoDB",
      "properties": {
        "mongodbLanguageServer.maxNumberOfProblems": {
          "scope": "resource",
          "type": "number",
          "default": 100,
          "description": "Controls the maximum number of problems produced by the server."
        },
        "mongodbLanguageServer.trace.server": {
          "scope": "window",
          "type": "object",
          "properties": {
            "verbosity": {
              "type": "string",
              "enum": [
                "off",
                "messages",
                "verbose"
              ],
              "default": "off",
              "description": "Controls the verbosity of the trace."
            },
            "format": {
              "type": "string",
              "enum": [
                "text",
                "json"
              ],
              "default": "text",
              "description": "Controls the output format of the trace."
            }
          }
        },
        "mdb.shell": {
          "type": "string",
          "enum": [
            "mongosh",
            "mongo"
          ],
          "enumDescriptions": [
            "Use the new mongosh",
            "Use the legacy mongo shell"
          ],
          "default": "mongosh",
          "description": "The MongoDB shell to use."
        },
        "mdb.showMongoDBConnectionExplorer": {
          "type": "boolean",
          "default": true,
          "description": "Show or hide the MongoDB connections view."
        },
        "mdb.showMongoDBPlaygrounds": {
          "type": "boolean",
          "default": true,
          "description": "Show or hide the MongoDB playgrounds view."
        },
        "mdb.showMongoDBHelpExplorer": {
          "type": "boolean",
          "default": true,
          "description": "Show or hide the help and feedback view."
        },
        "mdb.excludeFromPlaygroundsSearch": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Files and folders to exclude while searching for playgrounds in the current workspace.",
          "default": [
            "**/.*",
            "**/_output/**",
            "**/bower_components/**",
            "**/build/**",
            "**/dist/**",
            "**/node_modules/**",
            "**/out/**",
            "**/output/**",
            "**/release/**",
            "**/releases/**",
            "**/static/**",
            "**/target/**",
            "**/third_party/**",
            "**/vendor/**"
          ]
        },
        "mdb.defaultLimit": {
          "type": "number",
          "default": 10,
          "description": "The number of documents to fetch when viewing documents from a collection."
        },
        "mdb.confirmRunAll": {
          "type": "boolean",
          "default": true,
          "description": "Show a confirmation message before running commands in a playground."
        },
        "mdb.confirmRunCopilotCode": {
          "type": "boolean",
          "default": true,
          "description": "Show a confirmation message before running code generated by the MongoDB participant."
        },
        "mdb.useSampleDocsInCopilot": {
          "type": "boolean",
          "default": false,
          "description": "Enable sending sample field values with the VSCode copilot chat @MongoDB participant /query command."
        },
        "mdb.confirmDeleteDocument": {
          "type": "boolean",
          "default": true,
          "description": "Show a confirmation message before deleting a document from the tree view."
        },
        "mdb.persistOIDCTokens": {
          "type": "boolean",
          "default": true,
          "description": "Remain logged in when using the MONGODB-OIDC authentication mechanism for MongoDB server connection. Access tokens are encrypted using the system keychain before being stored."
        },
        "mdb.showOIDCDeviceAuthFlow": {
          "type": "boolean",
          "default": false,
          "description": "Show a checkbox on the connection form to enable device auth flow authentication for MongoDB server OIDC Authentication. This enables a less secure authentication flow that can be used as a fallback when browser-based authentication is unavailable."
        },
        "mdb.sendTelemetry": {
          "type": "boolean",
          "default": true,
          "description": "Allow the collection of anonymous diagnostic and usage telemetry data to help improve the product."
        },
        "mdb.connectionSaving.defaultConnectionSavingLocation": {
          "type": "string",
          "enum": [
            "Global",
            "Workspace",
            "Session Only"
          ],
          "enumDescriptions": [
            "Save new connections globally on vscode.",
            "Save new connections to the active workspace.",
            "Don't save new connections (connections are lost when the session is closed)."
          ],
          "default": "Global",
          "description": "When the setting that hides the option to choose where to save new connections is checked, this setting sets if and where new connections are saved."
        },
        "mdb.useDefaultTemplateForPlayground": {
          "type": "boolean",
          "default": true,
          "description": "Use default template for playground files."
        },
        "mdb.uniqueObjectIdPerCursor": {
          "type": "boolean",
          "default": false,
          "description": "The default behavior is to generate a single ObjectId and insert it on all cursors. Set to true to generate a unique ObjectId per cursor instead."
        },
        "mdb.browserCommandForOIDCAuth": {
          "type": "string",
          "default": "",
          "description": "Specify a shell command that is run to start the browser for authenticating with the OIDC identity provider for the server connection. Leave this empty for default browser."
        },
        "mdb.presetConnections": {
          "scope": "window",
          "type": "array",
          "description": "Defines preset connections. Can be used to share connection configurations in a workspace or global scope. Do not store sensitive credentials here.",
          "examples": [
            [
              {
                "name": "Preset Connection",
                "connectionString": "mongodb://localhost:27017"
              }
            ]
          ],
          "items": {
            "type": "object",
            "examples": [
              {
                "name": "Preset Connection",
                "connectionString": "mongodb://localhost:27017"
              }
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connection."
              },
              "connectionString": {
                "type": "string",
                "description": "Connection string. Do not store sensitive credentials here."
              }
            },
            "required": [
              "name",
              "connectionString"
            ]
          }
        }
      }
    },
    "icons": {
      "mdb-playground": {
        "description": "MongoDB Icon",
        "default": {
          "fontPath": "./fonts/mongodb-icons.woff",
          "fontCharacter": "\\ea01"
        }
      },
      "mdb-plus-circle": {
        "description": "MongoDB Icon",
        "default": {
          "fontPath": "./fonts/mongodb-icons.woff",
          "fontCharacter": "\\ea02"
        }
      },
      "mdb-connection-active": {
        "description": "MongoDB Icon",
        "default": {
          "fontPath": "./fonts/mongodb-icons.woff",
          "fontCharacter": "\\ea03"
        }
      },
      "mdb-connection-inactive": {
        "description": "MongoDB Icon",
        "default": {
          "fontPath": "./fonts/mongodb-icons.woff",
          "fontCharacter": "\\ea04"
        }
      }
    }
  },
  "dependencies": {
    "@babel/core": "^7.25.8",
    "@babel/parser": "^7.25.8",
    "@babel/traverse": "^7.25.7",
    "@mongodb-js/compass-components": "^1.34.8",
    "@mongodb-js/connection-form": "1.47.8",
    "@mongodb-js/connection-info": "^0.11.9",
    "@mongodb-js/device-id": "^0.2.0",
    "@mongodb-js/mongodb-constants": "^0.11.1",
    "@mongosh/browser-runtime-electron": "^3.10.0",
    "@mongosh/i18n": "^2.9.1",
    "@mongosh/service-provider-node-driver": "^3.8.0",
    "@mongosh/shell-api": "^3.6.0",
    "@segment/analytics-node": "^1.3.0",
    "bson": "^6.10.3",
    "debug": "^4.3.7",
    "dotenv": "^16.4.5",
    "ejson-shell-parser": "^2.0.1",
    "lodash": "^4.17.21",
    "micromatch": "^4.0.8",
    "mongodb": "^6.16.0",
    "mongodb-build-info": "^1.7.2",
    "mongodb-cloud-info": "^2.1.7",
    "mongodb-connection-string-url": "^3.0.2",
    "mongodb-data-service": "^22.25.5",
    "mongodb-log-writer": "^2.4.1",
    "mongodb-query-parser": "^4.3.2",
    "mongodb-schema": "^12.6.2",
    "node-machine-id": "1.1.12",
    "numeral": "^2.0.6",
    "query-string": "^7.1.3",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "ts-log": "^2.2.7",
    "uuid": "^8.3.2",
    "vscode-languageclient": "^9.0.1",
    "vscode-languageserver": "^9.0.1",
    "vscode-languageserver-textdocument": "^1.0.12"
  },
  "devDependencies": {
    "@babel/preset-typescript": "^7.25.7",
    "@babel/types": "^7.25.8",
    "@mongodb-js/oidc-mock-provider": "^0.10.3",
    "@mongodb-js/oidc-plugin": "^1.1.6",
    "@mongodb-js/prettier-config-devtools": "^1.0.1",
    "@mongodb-js/sbom-tools": "^0.7.3",
    "@mongodb-js/signing-utils": "^0.3.9",
    "@mongosh/service-provider-core": "^3.0.0",
    "@testing-library/react": "^14.3.1",
    "@testing-library/user-event": "^14.5.2",
    "@types/babel__traverse": "^7.20.6",
    "@types/chai": "^4.3.20",
    "@types/debug": "^4.1.12",
    "@types/glob": "^7.2.0",
    "@types/lodash": "^4.17.14",
    "@types/micromatch": "^4.0.9",
    "@types/mkdirp": "^2.0.0",
    "@types/mocha": "^8.2.3",
    "@types/node": "^14.18.63",
    "@types/prettier": "^2.7.3",
    "@types/react": "^17.0.83",
    "@types/react-dom": "^17.0.25",
    "@types/sinon": "^9.0.11",
    "@types/sinon-chai": "^3.2.12",
    "@types/uuid": "^8.3.4",
    "@types/vscode": "^1.94.0",
    "@typescript-eslint/eslint-plugin": "^5.62.0",
    "@typescript-eslint/parser": "^5.62.0",
    "@vscode/test-electron": "^2.4.1",
    "@vscode/vsce": "^3.2.0",
    "buffer": "^6.0.3",
    "chai": "^4.5.0",
    "chai-as-promised": "^7.1.2",
    "cross-env": "^7.0.3",
    "crypto-browserify": "^3.12.0",
    "depcheck": "^1.4.7",
    "duplicate-package-checker-webpack-plugin": "^3.0.0",
    "eslint": "^8.57.1",
    "eslint-config-mongodb-js": "^5.0.3",
    "eslint-plugin-mocha": "^10.5.0",
    "fork-ts-checker-webpack-plugin": "^9.0.2",
    "glob": "^7.2.3",
    "husky": "^9.1.6",
    "jsdom": "^23.2.0",
    "mkdirp": "^1.0.4",
    "mocha": "^10.7.3",
    "mocha-junit-reporter": "^2.2.1",
    "mocha-multi": "^1.1.7",
    "mongodb-client-encryption": "^6.3.0",
    "mongodb-rag-core": "^0.6.3",
    "mongodb-runner": "^5.8.3",
    "node-fetch": "^2.7.0",
    "node-loader": "^0.6.0",
    "npm-run-all": "^4.1.5",
    "openai": "^4.68.1",
    "ora": "^5.4.1",
    "path-browserify": "^1.0.1",
    "pre-commit": "^1.2.2",
    "prettier": "^2.8.8",
    "process": "^0.11.10",
    "rewiremock": "^3.14.5",
    "sinon": "^9.2.4",
    "sinon-chai": "^3.7.0",
    "source-map-support": "^0.5.21",
    "stream-browserify": "^3.0.0",
    "terser-webpack-plugin": "^5.3.10",
    "ts-loader": "^9.5.1",
    "ts-node": "^10.9.2",
    "typescript": "^4.9.5",
    "webfont": "^11.2.26",
    "webpack": "^5.95.0",
    "webpack-bundle-analyzer": "^4.10.2",
    "webpack-cli": "^5.1.4",
    "webpack-merge": "^5.10.0",
    "xvfb-maybe": "^0.2.1"
  },
  "overrides": {
    "react": "^18.3.1"
  }
}
