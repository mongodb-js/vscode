{
  "preview": true,
  "name": "mongodb-vscode",
  "displayName": "MongoDB for VS Code",
  "description": "Connect to MongoDB and Atlas directly from your VS Code environment, navigate your databases and collections, inspect your schema and use playgrounds to prototype queries and aggregations.",
  "version": "0.1.0",
  "homepage": "https://github.com/mongodb-js/vscode",
  "qna": "https://developer.mongodb.com/community/forums/",
  "repository": {
    "type": "git",
    "url": "https://github.com/mongodb-js/vscode"
  },
  "bugs": {
    "url": "https://github.com/mongodb-js/vscode/issues",
    "email": "vscode@mongodb.com"
  },
  "publisher": "mongodb",
  "categories": [
    "Programming Languages",
    "Snippets",
    "Other"
  ],
  "keywords": [
    "MongoDB",
    "MongoDB Atlas",
    "MQL",
    "Databases"
  ],
  "icon": "images/mongodb.png",
  "galleryBanner": {
    "color": "#3D4F58",
    "theme": "dark"
  },
  "license": "SEE LICENSE IN LICENSE.txt",
  "main": "./dist/extension.js",
  "scripts": {
    "clean": "rimraf ./out/* ./dist/* ",
    "lint": "eslint ./src/**/*.ts",
    "update-grammar": "ts-node ./scripts/update-grammar.ts",
    "update-snippets": "ts-node ./scripts/update-snippets.ts",
    "webpack-prod": "webpack --mode production",
    "webpack-dev": "webpack --mode development",
    "precompile": "npm run clean",
    "compile": "npm-run-all compile:*",
    "compile:keyfile": "ts-node ./scripts/generate-keyfile.ts",
    "compile:resources": "npm run update-grammar && npm run update-snippets",
    "compile:extension": "tsc -p ./",
    "watch": "npm run clean && npm run webpack-dev && npm-run-all -p watch:*",
    "watch:extension": "npm run compile:extension -- -watch",
    "watch:extension-bundles": "webpack --mode development --info-verbosity verbose --watch",
    "pretest": "npm run clean && npm run compile && npm run webpack-dev && cross-env MONGODB_VERSION=4.2.3 mongodb-runner start --port=27018",
    "test": "cross-env NODE_OPTIONS=--no-force-async-hooks-checks xvfb-maybe node ./out/test/runTest.js",
    "posttest": "mongodb-runner stop --port=27018",
    "vscode:prepublish": "npm run clean && npm run compile && webpack --mode production",
    "check": "mongodb-js-precommit './src/**/*{.ts}'",
    "package": "npm list --production --parseable --depth=99999 --loglevel=info || true && vsce package",
    "local-install": "npm run package && code --install-extension ./mongodb-vscode-*.vsix"
  },
  "engines": {
    "vscode": "^1.41.0",
    "node": "^12.4.0",
    "npm": ">=6.13.0"
  },
  "activationEvents": [
    "onCommand:mdb.connect",
    "onCommand:mdb.connectWithURI",
    "onCommand:mdb.createPlayground",
    "onCommand:mdb.addConnection",
    "onCommand:mdb.addConnectionWithURI",
    "onCommand:mdb.disconnect",
    "onCommand:mdb.removeConnection",
    "onCommand:mdb.openMongoDBShell",
    "onView:mongoDB",
    "onLanguage:json",
    "onLanguage:mongodb"
  ],
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "mongoDB",
          "title": "MongoDB",
          "icon": "images/sidebar-leaf.svg"
        }
      ]
    },
    "views": {
      "mongoDB": [
        {
          "id": "mongoDB",
          "name": "MongoDB",
          "when": "config.mdb.show == true"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "mongoDB",
        "contents": "No connections found.\n[Add Connection](command:mdb.connect)"
      }
    ],
    "languages": [
      {
        "id": "mongodb",
        "aliases": [
          "MongoDB",
          "mongodb"
        ],
        "extensions": [
          ".mongodb"
        ],
        "configuration": "./languages/mongodb-language-configuration.json"
      },
      {
        "id": "terraform",
        "aliases": [
          "Terraform",
          "terraform"
        ],
        "extensions": [
          ".tf"
        ]
      }
    ],
    "grammars": [
      {
        "language": "mongodb",
        "path": "./syntaxes/mongodb.tmLanguage.json",
        "scopeName": "source.mongodb"
      }
    ],
    "snippets": [
      {
        "language": "mongodb",
        "path": "./snippets/stage-autocompleter.json"
      },
      {
        "language": "terraform",
        "path": "./snippets/atlas-terraform.json"
      }
    ],
    "commands": [
      {
        "command": "mdb.connect",
        "title": "MongoDB: Connect"
      },
      {
        "command": "mdb.connectWithURI",
        "title": "MongoDB: Connect with Connection String..."
      },
      {
        "command": "mdb.disconnect",
        "title": "MongoDB: Disconnect"
      },
      {
        "command": "mdb.removeConnection",
        "title": "MongoDB: Remove Connection..."
      },
      {
        "command": "mdb.openMongoDBShell",
        "title": "MongoDB: Launch MongoDB Shell"
      },
      {
        "command": "mdb.treeViewOpenMongoDBShell",
        "title": "Launch MongoDB Shell"
      },
      {
        "command": "mdb.createPlayground",
        "title": "MongoDB: Create MongoDB Playground"
      },
      {
        "command": "mdb.createNewPlaygroundFromViewAction",
        "title": "Create MongoDB Playground"
      },
      {
        "command": "mdb.showActiveConnectionInPlayground",
        "title": "MongoDB: Show Active Connection In Playground"
      },
      {
        "command": "mdb.runSelectedPlaygroundBlocks",
        "title": "MongoDB: Run Selected Lines From Playground"
      },
      {
        "command": "mdb.runAllPlaygroundBlocks",
        "title": "MongoDB: Run All From Playground"
      },
      {
        "command": "mdb.runPlayground",
        "title": "MongoDB: Run All or Selection From Playground",
        "icon": {
          "light": "images/light/play.svg",
          "dark": "images/dark/play.svg"
        }
      },
      {
        "command": "mdb.addConnection",
        "title": "Add MongoDB Connection",
        "icon": {
          "light": "images/light/plus-circle.svg",
          "dark": "images/dark/plus-circle.svg"
        }
      },
      {
        "command": "mdb.addConnectionWithURI",
        "title": "Add MongoDB Connection with Connection String...",
        "icon": {
          "light": "images/light/plus-circle.svg",
          "dark": "images/dark/plus-circle.svg"
        }
      },
      {
        "command": "mdb.copyConnectionString",
        "title": "Copy Connection String"
      },
      {
        "command": "mdb.renameConnection",
        "title": "Rename Connection..."
      },
      {
        "command": "mdb.treeItemRemoveConnection",
        "title": "Remove Connection..."
      },
      {
        "command": "mdb.addDatabase",
        "title": "Add Database...",
        "icon": {
          "light": "images/light/plus-circle.svg",
          "dark": "images/dark/plus-circle.svg"
        }
      },
      {
        "command": "mdb.connectToConnectionTreeItem",
        "title": "Connect"
      },
      {
        "command": "mdb.disconnectFromConnectionTreeItem",
        "title": "Disconnect"
      },
      {
        "command": "mdb.refreshConnection",
        "title": "Refresh"
      },
      {
        "command": "mdb.copyDatabaseName",
        "title": "Copy Database Name"
      },
      {
        "command": "mdb.dropDatabase",
        "title": "Drop Database..."
      },
      {
        "command": "mdb.refreshDatabase",
        "title": "Refresh"
      },
      {
        "command": "mdb.addCollection",
        "title": "Add Collection...",
        "icon": {
          "light": "images/light/plus-circle.svg",
          "dark": "images/dark/plus-circle.svg"
        }
      },
      {
        "command": "mdb.viewCollectionDocuments",
        "title": "View Documents"
      },
      {
        "command": "mdb.refreshDocumentList",
        "title": "Refresh"
      },
      {
        "command": "mdb.copyCollectionName",
        "title": "Copy Collection Name"
      },
      {
        "command": "mdb.dropCollection",
        "title": "Drop Collection..."
      },
      {
        "command": "mdb.refreshCollection",
        "title": "Refresh"
      },
      {
        "command": "mdb.refreshSchema",
        "title": "Refresh"
      },
      {
        "command": "mdb.copySchemaFieldName",
        "title": "Copy Field Name"
      },
      {
        "command": "mdb.startStreamLanguageServerLogs",
        "title": "LSP Inspector: Start Stream LSP Logs"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "mdb.createNewPlaygroundFromViewAction",
          "when": "view == mongoDB"
        },
        {
          "command": "mdb.addConnection",
          "when": "view == mongoDB"
        },
        {
          "command": "mdb.addConnectionWithURI",
          "when": "view == mongoDB"
        }
      ],
      "view/item/context": [
        {
          "command": "mdb.addConnection",
          "when": "view == mongoDB && viewItem == mdbConnectionsTreeItem",
          "group": "inline"
        },
        {
          "command": "mdb.addConnection",
          "when": "view == mongoDB && viewItem == mdbConnectionsTreeItem"
        },
        {
          "command": "mdb.addConnectionWithURI",
          "when": "view == mongoDB && viewItem == mdbConnectionsTreeItem"
        },
        {
          "command": "mdb.addDatabase",
          "when": "view == mongoDB && viewItem == connectedConnectionTreeItem",
          "group": "inline"
        },
        {
          "command": "mdb.addDatabase",
          "when": "view == mongoDB && viewItem == connectedConnectionTreeItem",
          "group": "1@1"
        },
        {
          "command": "mdb.refreshConnection",
          "when": "view == mongoDB && viewItem == connectedConnectionTreeItem",
          "group": "1@2"
        },
        {
          "command": "mdb.treeViewOpenMongoDBShell",
          "when": "view == mongoDB && viewItem == connectedConnectionTreeItem",
          "group": "2@1"
        },
        {
          "command": "mdb.renameConnection",
          "when": "view == mongoDB && viewItem == connectedConnectionTreeItem",
          "group": "3@1"
        },
        {
          "command": "mdb.copyConnectionString",
          "when": "view == mongoDB && viewItem == connectedConnectionTreeItem",
          "group": "4@1"
        },
        {
          "command": "mdb.disconnectFromConnectionTreeItem",
          "when": "view == mongoDB && viewItem == connectedConnectionTreeItem",
          "group": "5@1"
        },
        {
          "command": "mdb.treeItemRemoveConnection",
          "when": "view == mongoDB && viewItem == connectedConnectionTreeItem",
          "group": "5@2"
        },
        {
          "command": "mdb.connectToConnectionTreeItem",
          "when": "view == mongoDB && viewItem == disconnectedConnectionTreeItem",
          "group": "1@1"
        },
        {
          "command": "mdb.renameConnection",
          "when": "view == mongoDB && viewItem == disconnectedConnectionTreeItem",
          "group": "2@1"
        },
        {
          "command": "mdb.copyConnectionString",
          "when": "view == mongoDB && viewItem == disconnectedConnectionTreeItem",
          "group": "3@1"
        },
        {
          "command": "mdb.treeItemRemoveConnection",
          "when": "view == mongoDB && viewItem == disconnectedConnectionTreeItem",
          "group": "4@1"
        },
        {
          "command": "mdb.addCollection",
          "when": "view == mongoDB && viewItem == databaseTreeItem",
          "group": "inline"
        },
        {
          "command": "mdb.addCollection",
          "when": "view == mongoDB && viewItem == databaseTreeItem",
          "group": "1@1"
        },
        {
          "command": "mdb.refreshDatabase",
          "when": "view == mongoDB && viewItem == databaseTreeItem",
          "group": "1@2"
        },
        {
          "command": "mdb.copyDatabaseName",
          "when": "view == mongoDB && viewItem == databaseTreeItem",
          "group": "2@1"
        },
        {
          "command": "mdb.dropDatabase",
          "when": "view == mongoDB && viewItem == databaseTreeItem",
          "group": "3@1"
        },
        {
          "command": "mdb.viewCollectionDocuments",
          "when": "view == mongoDB && viewItem == collectionTreeItem",
          "group": "1@1"
        },
        {
          "command": "mdb.refreshCollection",
          "when": "view == mongoDB && viewItem == collectionTreeItem",
          "group": "1@2"
        },
        {
          "command": "mdb.copyCollectionName",
          "when": "view == mongoDB && viewItem == collectionTreeItem",
          "group": "2@1"
        },
        {
          "command": "mdb.dropCollection",
          "when": "view == mongoDB && viewItem == collectionTreeItem",
          "group": "3@1"
        },
        {
          "command": "mdb.viewCollectionDocuments",
          "when": "view == mongoDB && viewItem == documentListTreeItem"
        },
        {
          "command": "mdb.refreshDocumentList",
          "when": "view == mongoDB && viewItem == documentListTreeItem"
        },
        {
          "command": "mdb.refreshSchema",
          "when": "view == mongoDB && viewItem == schemaTreeItem"
        },
        {
          "command": "mdb.copySchemaFieldName",
          "when": "view == mongoDB && viewItem == fieldTreeItem"
        }
      ],
      "editor/title": [
        {
          "command": "mdb.runPlayground",
          "group": "navigation",
          "when": "editorLangId == mongodb"
        }
      ],
      "commandPalette": [
        {
          "command": "mdb.addConnection",
          "when": "false"
        },
        {
          "command": "mdb.addConnectionWithURI",
          "when": "false"
        },
        {
          "command": "mdb.createNewPlaygroundFromViewAction",
          "when": "false"
        },
        {
          "command": "mdb.showActiveConnectionInPlayground",
          "when": "false"
        },
        {
          "command": "mdb.copyConnectionString",
          "when": "false"
        },
        {
          "command": "mdb.renameConnection",
          "when": "false"
        },
        {
          "command": "mdb.treeItemRemoveConnection",
          "when": "false"
        },
        {
          "command": "mdb.addDatabase",
          "when": "false"
        },
        {
          "command": "mdb.connectToConnectionTreeItem",
          "when": "false"
        },
        {
          "command": "mdb.treeViewOpenMongoDBShell",
          "when": "false"
        },
        {
          "command": "mdb.disconnectFromConnectionTreeItem",
          "when": "false"
        },
        {
          "command": "mdb.refreshConnection",
          "when": "false"
        },
        {
          "command": "mdb.copyDatabaseName",
          "when": "false"
        },
        {
          "command": "mdb.dropDatabase",
          "when": "false"
        },
        {
          "command": "mdb.refreshDatabase",
          "when": "false"
        },
        {
          "command": "mdb.addCollection",
          "when": "false"
        },
        {
          "command": "mdb.viewCollectionDocuments",
          "when": "false"
        },
        {
          "command": "mdb.refreshDocumentList",
          "when": "false"
        },
        {
          "command": "mdb.copyCollectionName",
          "when": "false"
        },
        {
          "command": "mdb.dropCollection",
          "when": "false"
        },
        {
          "command": "mdb.refreshCollection",
          "when": "false"
        },
        {
          "command": "mdb.refreshSchema",
          "when": "false"
        },
        {
          "command": "mdb.runPlayground",
          "when": "false"
        },
        {
          "command": "mdb.copySchemaFieldName",
          "when": "false"
        }
      ]
    },
    "capabilities": {
      "codeLensProvider": {
        "resolveProvider": "true"
      }
    },
    "configuration": {
      "title": "MongoDB",
      "properties": {
        "mongodbLanguageServer.maxNumberOfProblems": {
          "scope": "resource",
          "type": "number",
          "default": 100,
          "description": "Controls the maximum number of problems produced by the server."
        },
        "mongodbLanguageServer.trace.server": {
          "scope": "window",
          "type": "object",
          "properties": {
            "verbosity": {
              "type": "string",
              "enum": [
                "off",
                "messages",
                "verbose"
              ],
              "default": "off",
              "description": "Controls the verbosity of the trace."
            },
            "format": {
              "type": "string",
              "enum": [
                "text",
                "json"
              ],
              "default": "text",
              "description": "Controls the output format of the trace."
            }
          }
        },
        "mdb.shell": {
          "type": "string",
          "enum": [
            "mongo",
            "mongosh"
          ],
          "enumDescriptions": [
            "Use the legacy mongo shell",
            "Use the new mongosh"
          ],
          "default": "mongo",
          "description": "The MongoDB shell to use."
        },
        "mdb.show": {
          "type": "boolean",
          "default": true,
          "description": "Show or hide the MongoDB view."
        },
        "mdb.defaultLimit": {
          "type": "number",
          "default": 10,
          "description": "The number of documents to fetch when viewing documents from a collection."
        },
        "mdb.confirmRunAll": {
          "type": "boolean",
          "default": true,
          "description": "Show a confirmation message before running commands in a playground."
        },
        "mdb.sendTelemetry": {
          "type": "boolean",
          "default": true,
          "description": "Allow the collection of anonynous diagnostic and usage telemetry data to help improve the product."
        },
        "mdb.connectionSaving.hideOptionToChooseWhereToSaveNewConnections": {
          "type": "boolean",
          "default": true,
          "description": "When a connection is added, a prompt is shown that let's the user decide where the new connection should be saved. When this setting is checked, the prompt is not shown and the default connection saving location setting is used."
        },
        "mdb.connectionSaving.defaultConnectionSavingLocation": {
          "type": "string",
          "enum": [
            "Workspace",
            "Global",
            "Session Only"
          ],
          "enumDescriptions": [
            "Save new connections globally on vscode.",
            "Save new connections to the active workspace.",
            "Don't save new connections (connections are lost when the session is closed)."
          ],
          "default": "Global",
          "description": "When the setting that hides the option to choose where to save new connections is checked, this setting sets if and where new connections are saved."
        },
        "mdb.useDefaultTemplateForPlayground": {
          "type": "boolean",
          "default": true,
          "description": "Use default template for playground files."
        }
      }
    }
  },
  "dependencies": {
    "@babel/parser": "^7.9.6",
    "@babel/traverse": "^7.9.6",
    "@fortawesome/fontawesome-svg-core": "^1.2.28",
    "@fortawesome/free-solid-svg-icons": "^5.13.0",
    "@fortawesome/react-fontawesome": "^0.1.9",
    "@leafygreen-ui/toggle": "^3.0.1",
    "@mongosh/browser-runtime-electron": "0.0.1-alpha.19",
    "@mongosh/service-provider-server": "0.0.1-alpha.19",
    "@mongosh/shell-api": "0.0.1-alpha.19",
    "analytics-node": "^3.4.0-beta.1",
    "bson": "^4.0.3",
    "classnames": "^2.2.6",
    "debug": "^4.1.1",
    "dotenv": "^8.2.0",
    "encoding": "^0.1.12",
    "mongodb-cloud-info": "^1.1.2",
    "mongodb-connection-model": "^16.1.4",
    "mongodb-data-service": "^16.8.1",
    "mongodb-ns": "^2.2.0",
    "mongodb-schema": "^8.2.5",
    "numeral": "^2.0.6",
    "react": "^16.13.1",
    "react-dom": "^16.13.1",
    "react-redux": "^7.2.0",
    "redux": "^4.0.5",
    "ts-log": "^2.1.4",
    "uuid": "^8.0.2",
    "vscode-languageclient": "^6.1.3",
    "vscode-languageserver": "^6.1.1",
    "vscode-languageserver-textdocument": "^1.0.1",
    "ws": "^7.2.3"
  },
  "devDependencies": {
    "@types/chai": "^4.2.9",
    "@types/chai-fs": "^2.0.2",
    "@types/chai-json-schema": "^1.4.5",
    "@types/debug": "^4.1.5",
    "@types/glob": "^7.1.1",
    "@types/keytar": "4.4.2",
    "@types/mocha": "^7.0.1",
    "@types/node": "^13.7.1",
    "@types/react": "^16.9.25",
    "@types/react-dom": "^16.9.5",
    "@types/sinon": "^9.0.1",
    "@types/vscode": "^1.41.0",
    "@types/ws": "^7.2.4",
    "@typescript-eslint/eslint-plugin": "^2.19.2",
    "@typescript-eslint/parser": "^2.19.2",
    "autoprefixer": "^9.7.5",
    "chai": "^4.2.0",
    "chai-as-promised": "^7.1.1",
    "chai-fs": "^2.0.0",
    "chai-json-schema": "^1.5.1",
    "cross-env": "^7.0.2",
    "css-loader": "^3.4.2",
    "eslint": "^6.8.0",
    "eslint-config-mongodb-js": "^5.0.3",
    "eslint-plugin-react": "^7.19.0",
    "glob": "^7.1.6",
    "less": "^3.11.1",
    "less-loader": "^5.0.0",
    "meow": "^6.0.1",
    "mkdirp": "^1.0.4",
    "mocha": "^7.0.1",
    "mocha-junit-reporter": "^1.23.3",
    "mocha-multi": "^1.1.3",
    "mongodb-ace-autocompleter": "^0.4.9",
    "mongodb-js-precommit": "^2.2.1",
    "mongodb-runner": "^4.8.0",
    "node-loader": "^0.6.0",
    "npm-run-all": "^4.1.5",
    "ora": "^4.0.3",
    "postcss-loader": "^3.0.0",
    "sinon": "^9.0.0",
    "sinon-chai": "^3.5.0",
    "style-loader": "^1.1.3",
    "ts-loader": "^6.2.2",
    "ts-node": "^8.6.2",
    "typescript": "^3.7.5",
    "vsce": "^1.74.0",
    "vscode-test": "^1.3.0",
    "webpack": "^4.42.0",
    "webpack-cli": "^3.3.11",
    "xvfb-maybe": "^0.2.1"
  },
  "dependency-check": {
    "ignore": [
      "vscode",
      "keytar",
      "electron"
    ]
  }
}
