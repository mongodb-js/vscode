import { z } from 'zod';
import type { CallToolResult } from '@modelcontextprotocol/sdk/types';
import { AtlasToolBase } from '../atlasTool';
import type { ToolArgs, OperationType } from '../../tool';
import type {
  CloudDatabaseUser,
  DatabaseUserRole,
} from '../../../common/atlas/openapi';
import { generateSecurePassword } from '../../../common/atlas/generatePassword';

export class CreateDBUserTool extends AtlasToolBase {
  protected name = 'atlas-create-db-user';
  protected description = 'Create an MongoDB Atlas database user';
  protected operationType: OperationType = 'create';
  protected argsShape = {
    projectId: z.string().describe('Atlas project ID'),
    username: z.string().describe('Username for the new user'),
    // Models will generate overly simplistic passwords like SecurePassword123 or
    // AtlasPassword123, which are easily guessable and exploitable. We're instructing
    // the model not to try and generate anything and instead leave the field unset.
    password: z
      .string()
      .optional()
      .nullable()
      .describe(
        "Password for the new user. If the user hasn't supplied an explicit password, leave it unset and under no circumstances try to generate a random one. A secure password will be generated by the MCP server if necessary.",
      ),
    roles: z
      .array(
        z.object({
          roleName: z.string().describe('Role name'),
          databaseName: z.string().describe('Database name').default('admin'),
          collectionName: z.string().describe('Collection name').optional(),
        }),
      )
      .describe('Roles for the new user'),
    clusters: z
      .array(z.string())
      .describe(
        'Clusters to assign the user to, leave empty for access to all clusters',
      )
      .optional(),
  };

  protected async execute({
    projectId,
    username,
    password,
    roles,
    clusters,
  }: ToolArgs<typeof this.argsShape>): Promise<CallToolResult> {
    const shouldGeneratePassword = !password;
    if (shouldGeneratePassword) {
      password = await generateSecurePassword();
    }

    const input = {
      groupId: projectId,
      awsIAMType: 'NONE',
      databaseName: 'admin',
      ldapAuthType: 'NONE',
      oidcAuthType: 'NONE',
      x509Type: 'NONE',
      username,
      password,
      roles: roles as unknown as DatabaseUserRole[],
      scopes: clusters?.length
        ? clusters.map((cluster) => ({
            type: 'CLUSTER',
            name: cluster,
          }))
        : undefined,
    } as CloudDatabaseUser;

    await this.session.apiClient.createDatabaseUser({
      params: {
        path: {
          groupId: projectId,
        },
      },
      body: input,
    });

    return {
      content: [
        {
          type: 'text',
          text: `User "${username}" created successfully${shouldGeneratePassword ? ` with password: \`${password}\`` : ''}.`,
        },
      ],
    };
  }
}
