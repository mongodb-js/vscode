variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm
  node_version: '12.4.0'

trigger:
  - master

# For current versions of vm's using the `*-latest` alias:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops
strategy:
  matrix:
    linux:
      imageName: 'ubuntu-latest'
    mac:
      imageName: 'macos-latest'
    windows:
      # NOTE (lucas): Also blocked on Windows 2019 by
      # https://jira.mongodb.org/browse/NODE-2465
      # imageName: 'windows-latest'
      imageName: 'vs2017-win2016'

pool:
  vmImage: $(imageName)

steps:
  - script: |
      set -e
      sudo apt-get update

      # Electron linux reqs
      sudo apt-get install -y libxkbfile-dev pkg-config libxss1 dbus dbus-x11 xvfb libgtk-3-0;

      # Keytar and Kerberos
      sudo apt-get install -y libsecret-1-dev libkrb5-dev gnome-keyring libdbus-glib-1-dev libsecret-tools;

      echo "Setting up keyring for credential storing..."

      export NO_AT_BRIDGE=1;
      export DISPLAY=:99.0;
      eval $(dbus-launch --sh-syntax);
      sleep 3;

      eval $(/usr/bin/gnome-keyring-daemon --start --components=pkcs11,secrets,ssh)

      eval $(echo -n "" | secret-tool store --label=Unlocker type unlock-keyring)
      eval $(secret-tool lookup type unlock-keyring)

      # eval "$(dbus-launch --sh-syntax)"

      # mkdir -p ~/.cache
      # mkdir -p ~/.local/share/keyrings # where the automatic keyring is created

      # # 1. Create the keyring manually with a dummy password in stdin
      # eval "$(printf '\n' | gnome-keyring-daemon --unlock)"

      # # 2. Start the daemon, using the password to unlock the just-created keyring:
      # eval "$(printf '\n' | /usr/bin/gnome-keyring-daemon --start)"

      echo "Done setting up keyring for credential storing."

      # cc gkey-unlock.c -o gkey-unlock -Wall -I/usr/include/gnome-keyring -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -lgnome-keyring -lglib-2.0

      # ./gkey-unlock

      # Set up keytar
      # export NO_AT_BRIDGE=1
      # export DISPLAY=:99.0; sleep 3;
      # eval $(dbus-launch --sh-syntax);
      # eval $(echo -n "" | /usr/bin/gnome-keyring-daemon --login);
      # eval $(/usr/bin/gnome-keyring-daemon --components=secrets --start);
      # /usr/bin/python -c "import gnomekeyring;gnomekeyring.create_sync('login', '');";

      ## ## add install  dbus-python python3-venv
      # export NO_AT_BRIDGE=1
      # eval $(dbus-launch --sh-syntax)
      # export DBUS_SESSION_BUS_PID
      # export DBUS_SESSION_BUS_WINDOWID
      # dbus-launch
      # gnome-keyring-daemon --start --daemonize --components=secrets
      # echo '' | gnome-keyring-daemon -r -d --unlock
      # eval $(echo -n "" | /usr/bin/gnome-keyring-daemon --login);
      # eval $(/usr/bin/gnome-keyring-daemon --components=secrets --start);
      # /usr/bin/python -c "import gnomekeyring;gnomekeyring.create_sync('login', '');";
    displayName: 'Install native Linux dependencies'
    condition: in(variables['agent.os'], 'Linux')
  - task: NodeTool@0
    inputs:
      versionSpec: $(node_version)
    displayName: 'Install node@$(node_version)'
  # Proper caching for `npm ci` to be fast
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops#nodejsnpm
  - task: Cache@2
    inputs:
      key: 'npm | "$(Agent.OS)" | package-lock.json'
      restoreKeys: |
        npm | "$(Agent.OS)"
        npm
      path: $(npm_config_cache)
    displayName: Cache npm
  # TODO (lucas): Caching `./.vscode-test` in the future would be nice
  # so vscode-test isn't downloading the vscode zip everytime. same goes for mongoddb-runner.
  - bash: |
      npm i -g npm@latest;
      npm ci;
    displayName: 'Install dependencies from npm'

  - bash: npm run test
    displayName: 'Run Tests'
    env:
      SEGMENT_KEY: $(segmentKey)
  - bash: ls -alh
    displayName: 'Post Tests'

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    condition: succeededOrFailed()
    inputs:
      testRunner: JUnit
      testResultsFiles: 'test-results.xml'
      failTaskOnFailedTests: true

  - bash: |
      npm i -g vsce;
      vsce package
    displayName: 'Build .vsix'
    env:
      SEGMENT_KEY: $(segmentKey)

  # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#set-variables-in-scripts
  - bash: |
      echo "##vso[task.setvariable variable=extension_version]`npx json -f package.json version`"
    displayName: 'Set extension_version variable from package.json version'
  - bash: |
      ls -alh mongodb-vscode-$(extension_version).vsix
    displayName: 'Check .vsix filesize'
